
#define HAS_DERIV

#define BACKGROUND_INTENSITY 0.0
#define THEME_COLOR vec3(0.670,0.513,0.007 )

// Perlin
float cnoise(vec3 P);

// Wrapper (not really needed)
float delta(float v, float fallback){
#ifndef HAS_DERIV
    return fallback;
#else
    return 2.0 * length(vec2(dFdx(v), dFdy(v)));
#endif
}

// https://iquilezles.org/articles/distance
float smoothLine(float val, float scale, float thickness, float fallback){
    // Compute gradient using continuous val.
    float deltaVal = delta(val, fallback);
    // Line frequency.
    float scaledVal = mod(val, scale);
    float finalVal = abs(scaledVal) / max(deltaVal, 0.001) - thickness;
    return 1.0 - smoothstep(0.1, 0.9, finalVal);
}

vec3 evaluate(vec2 ndc, float time, float ratio){
    // Colors.
    vec3 themeColor = THEME_COLOR;
    vec3 backgroundColor = vec3(BACKGROUND_INTENSITY);
    vec3 foregroundColor = vec3(1.0 - BACKGROUND_INTENSITY);

    // Scaled UVs.
    vec2 rawUV = 0.5 * ndc + 0.5;
    vec2 ratioUV = 0.5 * vec2(ratio, 1.0) * ndc + 0.5;
    vec2 gridUV = ratioUV + 0.5;

    // Isolines landscape.
    float noise = cnoise(vec3(3.0 * ratioUV, 0.000025 * time));
    float mainLevelLine = smoothLine(noise, 0.4, 0.8, 0.015);
    float secondLevelLine = smoothLine(noise, 0.1, 0.1, 0.01);
    float intensityLines = max(mainLevelLine, secondLevelLine);

    // Add a regular grid.
    float gridXLine = smoothLine(gridUV.x, 0.35, 0.5, 0.005);
    float gridYLine = smoothLine(gridUV.y, 0.35, 0.5, 0.005);
    float intensityGrid = max(gridYLine, gridXLine);

    // Extra point at random location.
    // (could use proper disk SDF instead of a thick line circle)
    float motionTime = 0.0001 * time;
    float nx = cnoise(-vec3(8.2, 9.4, motionTime));
    float ny = cnoise(-vec3(87.8, 13.1, motionTime));
    vec2 position = 0.5 * 1.75 * vec2(nx, ny) + 0.5;
    float dist = length(ratioUV - position);
    float intensityPoint = smoothLine(dist, 10000.0 /* cheat, no repetition needed */, 4.0, 0.005);

    // Combine everything.
    float themeColorIntensity = max(intensityLines, intensityGrid);
    float foregroundColorIntensity = intensityPoint;

    vec3 color = mix(backgroundColor, themeColor, themeColorIntensity);
    //color = mix(color, foregroundColor, foregroundColorIntensity);

    // Vignetting.
    float attenuation = smoothstep(0.6, 1.0, length(rawUV - 0.5)*2.0);
    return mix(color, backgroundColor, 0.);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Convert shadertoy inputs to my framework inputs.
    vec2 ndc = 2.0 * fragCoord/iResolution.xy - 1.0;
    float time = iTime * 1000.0f;
    float ratio = iResolution.x/iResolution.y;
   
    fragColor.rgb = evaluate(ndc, time, ratio);
    fragColor.a = 1.0;
}

// Perlin noise: Copyright (C) 2011-2016 by Stefan Gustavson 
// Licence: https://github.com/stegu/webgl-noise/blob/master/LICENSE
vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }

vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }

vec4 permute(vec4 x){ return mod289(((x*34.0)+1.0)*x); }

vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }

vec3 fade(vec3 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }

float cnoise(vec3 P);
// Classic Perlin noise
float cnoise(vec3 P) {
    vec3 Pi0 = floor(P); // Integer part for indexing
    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
    Pi0 = mod289(Pi0);
    Pi1 = mod289(Pi1);
    vec3 Pf0 = fract(P); // Fractional part for interpolation
    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
    vec4 iy = vec4(Pi0.yy, Pi1.yy);
    vec4 iz0 = Pi0.zzzz;
    vec4 iz1 = Pi1.zzzz;

    vec4 ixy = permute(permute(ix) + iy);
    vec4 ixy0 = permute(ixy + iz0);
    vec4 ixy1 = permute(ixy + iz1);

    vec4 gx0 = ixy0 * (1.0 / 7.0);
    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
    gx0 = fract(gx0);
    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
    vec4 sz0 = step(gz0, vec4(0.0));
    gx0 -= sz0 * (step(0.0, gx0) - 0.5);
    gy0 -= sz0 * (step(0.0, gy0) - 0.5);

    vec4 gx1 = ixy1 * (1.0 / 7.0);
    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
    gx1 = fract(gx1);
    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
    vec4 sz1 = step(gz1, vec4(0.0));
    gx1 -= sz1 * (step(0.0, gx1) - 0.5);
    gy1 -= sz1 * (step(0.0, gy1) - 0.5);

    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
    g000 *= norm0.x;
    g010 *= norm0.y;
    g100 *= norm0.z;
    g110 *= norm0.w;
    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
    g001 *= norm1.x;
    g011 *= norm1.y;
    g101 *= norm1.z;
    g111 *= norm1.w;

    float n000 = dot(g000, Pf0);
    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
    float n111 = dot(g111, Pf1);

    vec3 fade_xyz = fade(Pf0);
    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
    return 2.2 * n_xyz;
}